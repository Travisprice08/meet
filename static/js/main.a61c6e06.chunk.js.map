{"version":3,"sources":["component/Event.js","component/EventList.js","component/CitySearch.js","component/NumberOfEvents.js","component/api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","console","log","this","props","event","summary","location","Component","EventList","events","className","map","id","CitySearch","state","query","suggestions","showSuggestions","undefined","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","setState","handleItemClicked","suggestion","updateEvents","type","placeholder","onChange","onFocus","style","display","onClick","NumberOfEvents","numberOfEvents","infoText","number","updateEventCount","e","getAccessToken","a","accessToken","localStorage","getItem","checkToken","tokenCheck","error","removeItem","searchParams","URLSearchParams","window","search","get","code","axios","results","authUrl","data","href","getToken","fetch","then","res","json","catch","result","getEvents","NProgress","start","navigator","onLine","done","JSON","parse","token","encodeCode","encodeURIComponent","access_token","setItem","App","currentLocation","eventCount","mounted","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a61c6e06.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Event extends Component {\n    render() {\n        console.log(this.props)\n        return <div>\n            <p>{this.props.event.summary}</p>\n            <p>{this.props.event.location}</p>\n        </div>;\n    }\n}\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n    render() {\n        const { events } = this.props;\n        return (\n            <ul className=\"EventList\">\n                {events.map(event =>\n                    <li key={event.id}>\n                        <Event event={event} />\n                    </li>\n                )}\n            </ul>\n        );\n    }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n    state = {\n\n        query: '',\n        suggestions: [],\n        showSuggestions: undefined,\n    }\n\n    handleInputChanged = (event) => {\n        const value = event.target.value;\n        const suggestions = this.props.locations.filter((location) => {\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n        });\n        this.setState({\n            query: value,\n            suggestions,\n        });\n    };\n\n    handleItemClicked = (suggestion) => {\n        this.setState({\n            query: suggestion,\n            showSuggestions: false\n        });\n\n        this.props.updateEvents(suggestion);\n    }\n    render() {\n        return (\n            <div className=\"CitySearch\">\n                <p>Search your city</p>\n                <input\n                    type=\"text\"\n                    className=\"city\"\n                    placeholder=\"Search for a city\"\n                    value={this.state.query}\n                    onChange={this.handleInputChanged}\n                    onFocus={() => { this.setState({ showSuggestions: true }) }}\n                />\n                <div>\n                    <ul className=\"suggestions\" style={this.state.showSuggestions ? {} : { display: 'none' }}>\n                        {this.state.suggestions.map((suggestion) => (\n                            <li\n                                key={suggestion}\n                                onClick={() => this.handleItemClicked(suggestion)}\n                            >{suggestion}</li>\n                        ))}\n                        <li onClick={() => this.handleItemClicked(\"all\")}>\n                            <b>See all cities</b>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n    state = {\n        numberOfEvents: 32,\n        infoText: \"\",\n    }\n\n    handleInputChanged = (event) => {\n        const number = event.target.value;\n        if (number <= 0 || number > 99) {\n            return this.setState({\n                //errorText: 'Please enter a number between 0 and 99',\n                numberOfEvents: ''\n            });\n        } else {\n            this.setState({\n                numberOfEvents: number,\n                //errorText: '',\n            });\n            this.props.updateEventCount(event.target.value);\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <p>Limit Search Results</p>\n\n                <input type=\"number\" id=\"numberInput\" value={this.state.numberOfEvents} className=\"numberInput\" onChange={(e) => this.handleInputChanged(e)} />\n            </div>\n        );\n    }\n}\n\nexport default NumberOfEvents;","import axios from 'axios';\nimport { mockData } from './mock-data';\nimport NProgress from 'nprogress';\n\nexport const getAccessToken = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    const tokenCheck = accessToken && (await checkToken(accessToken));\n\n    if (!accessToken || tokenCheck.error) {\n        await localStorage.removeItem(\"access_token\");\n        const searchParams = new URLSearchParams(window.location.search);\n        const code = await searchParams.get(\"code\");\n        if (!code) {\n            const results = await axios.get(\n                \"https://rwmanw8a34.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\"\n            );\n            const { authUrl } = results.data;\n            // const redirectUrl = \"http://localhost:3000/meet\";\n            // console.log(\"authUrl:\", authUrl);\n            // return (window.location.href = `https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&response_type=code&client_id=665870512593-0ik3dov2n6ofeniuol62h5r4kqqg9ufm.apps.googleusercontent.com&redirect_uri=${redirectUrl}`);\n            return (window.location.href = authUrl);\n        }\n        return code && getToken(code);\n    }\n    return accessToken;\n}\n\nexport const checkToken = async (accessToken) => {\n    const result = await fetch(\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n    )\n        .then((res) => res.json())\n        .catch((error) => error.json());\n\n    return result;\n};\n\nexport const getEvents = async () => {\n    NProgress.start();\n\n    /*if (window.location.href.startsWith('http://localhost')) {\n        NProgress.done();\n        return mockData;\n    }*/\n\n    if (!navigator.onLine) {\n        const data = localStorage.getItem(\"lastEvents\");\n        NProgress.done();\n        return data ? JSON.parse(data).events : [];;\n    }\n\n    const token = await getAccessToken();\n    console.log(\"token:\", token);\n\n    //     if (token) {\n    //         removeQuery();\n    //         const url = `https://rwmanw8a34.execute-api.eu-central-1.amazonaws.com/dev/api/get-events/${token}`;\n    //         const result = await axios.get(url);\n    //         if (result.data) {\n    //             var locations = extractLocations(result.data.events);\n    //             localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n    //             localStorage.setItem(\"locations\", JSON.stringify(locations));\n    //         }\n    //         NProgress.done();\n    //         return result.data.events;\n    //     }\n};\n\nconst getToken = async (code) => {\n    const encodeCode = encodeURIComponent(code);\n    const { access_token } = await fetch(\n        `https://rwmanw8a34.execute-api.eu-central-1.amazonaws.com/dev/api/token/${encodeCode}`\n    )\n        .then((res) => {\n            return res.json();\n        })\n        .catch((error) => error);\n\n    access_token && localStorage.setItem(\"access_token\", access_token);\n\n    return access_token\n};\n\nconst removeQuery = () => {\n    if (window.history.pushState && window.location.pathname) {\n        var newurl =\n            window.location.protocal +\n            \"//\" +\n            window.location.host +\n            window.location.pathname;\n        window.history.pushState(\"\", \"\", newurl);\n    } else {\n        newurl = window.location.protocol + \"//\" + window.location.host;\n        window.history.pushState(\"\", \"\", newurl);\n    }\n};\n\nexport const extractLocations = (events) => {\n    var extractLocations = events.map((event) => event.location);\n    var locations = [...new Set(extractLocations)];\n    return locations;\n};\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './component/EventList';\nimport CitySearch from './component/CitySearch';\nimport NumberOfEvents from './component/NumberOfEvents';\nimport { extractLocations, getEvents } from './component/api';\nimport './nprogress.css';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: [],\n    currentLocation: \"all\",\n    numberOfEvents: 32,\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      /*if (this.mounted) {\n        this.setState({\n          events: events.slice(0, this.state.numberOfEvents),\n          locations: extractLocations(events)\n        });\n      }*/\n    });\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  updateEvents = (location) => {\n    /*getEvents().then((events) => {\n      const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n      this.setState({\n        events: locationEvents.slice(0, this.state.numberOfEvents)\n      });\n    });*/\n  }\n\n  updateEventCount = (eventCount) => {\n    const { currentLocation } = this.state;\n    this.setState({\n      numberOfEvents: eventCount\n    });\n    this.updateEvents(currentLocation, eventCount);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents updateEventCount={(e) => this.updateEventCount(e)} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}